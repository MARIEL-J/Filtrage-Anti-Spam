import os                                                                       
import streamlit as st
import pickle
import pandas as pd
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from bokeh.plotting import figure
from bokeh.io import show
from streamlit_option_menu import option_menu
from googletrans import Translator
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import string

ps = PorterStemmer()

import logging

# Configurer le logging
logging.basicConfig(level=logging.DEBUG)

ps = PorterStemmer()

# Charger le mod√®le pr√©-entra√Æn√© et le vectoriseur
try:
    model = pickle.load(open('model.pkl', 'rb'))
    cv = pickle.load(open('vectorizer.pkl', 'rb'))
except FileNotFoundError as e:
    st.error("Erreur lors du chargement du mod√®le ou du vectoriseur. Veuillez vous assurer que les fichiers 'spam.pkl' et 'vectorizer.pkl' sont pr√©sents.")
    st.stop()

def transform_text(text):
    try:
        logging.debug("D√©but de la transformation du texte.")
        
        # Initialiser le traducteur
        translator = Translator()
        
        # D√©tection de la langue
        detected_lang = translator.detect(text).lang
        logging.debug(f"Langue d√©tect√©e : {detected_lang}")
        
        # Traduction en anglais si la langue d√©tect√©e n'est pas l'anglais
        if detected_lang != 'en':
            text = translator.translate(text, src=detected_lang, dest='en').text
            logging.debug(f"Texte traduit : {text}")
        
        # Conversion du texte en minuscules
        text = text.lower()
        logging.debug(f"Texte en minuscules : {text}")
        
        # Tokenisation du texte
        text = nltk.word_tokenize(text)
        logging.debug(f"Texte tokenis√© : {text}")
        
        # Suppression des mots non alphanum√©riques
        text = [word for word in text if word.isalnum()]
        logging.debug(f"Texte apr√®s suppression des mots non alphanum√©riques : {text}")
        
        # Suppression des stopwords et de la ponctuation
        stop_words = set(stopwords.words('english'))
        text = [word for word in text if word not in stop_words and word not in string.punctuation]
        logging.debug(f"Texte apr√®s suppression des stopwords et de la ponctuation : {text}")
        
        # Application du stemming
        text = [ps.stem(word) for word in text]
        logging.debug(f"Texte apr√®s stemming : {text}")
        
        # Retourner le texte transform√©
        transformed_text = " ".join(text)
        logging.debug(f"Texte transform√© final : {transformed_text}")
        return transformed_text
    
    except Exception as e:
        logging.error(f"Erreur lors du traitement : {e}")
        return ""



st.set_page_config(
    page_title='Spamvanished by Jacquelin & F√©ridia',
    page_icon="icone.jpg")

# General formating in CSS
page_bg_img = '''
   <style>
   body {
   background-image: url("https://www.xmple.com/wallpaper/black-linear-cyan-gradient-1920x1080-c2-010506-073a47-a-120-f-14.svg");
   background-size: cover;
   color: #fff;
   }
   
   h1 {
   	color:#c4d8d6;
   }
   
   h2 {
   color : #5a6794;
   }
   
   label {
   color: #fff;
   }
   
   .stButton>button {
   color: #000000;
   background-color: #f6be65;
   font-size: large;
   }
   
   .stTextArea>label {
   color: #fff;
   font-size: medium;
   }
   
   .stTextArea>div{
   background-color: #ddddda;
   }
   
   .stTextInput>label {
   color: #fff;
   font-size: medium;
   }
   
   .stTextInput>div>div{
   background-color: #ddddda;
   }
   
   .stSelectbox>label{
   color: #fff;
   font-size: medium;
   }
   
   .stSelectbox>div>div{
   background-color: #ddddda;
   }
   
   .btn-outline-secondary{
   	background-color: #f6be65;
   }
   
   .btn-outline-secondary>span{
   	color: #000000;
   }
   
   .stAlert{
   background-color: #b0cac7;
   }
   </style>
   '''
st.markdown(page_bg_img, unsafe_allow_html=True)


def main():
    # Sidebar menu using option_menu
    with st.sidebar:
        selected = option_menu(
            menu_title="Menu de navigation",  # Sidebar title
            options=["Home", "Description du Dataset", "Proc√©dure d'Apprentissage Automatique", 
                     "R√©sultats", "Classifier son mail", "√âquipe de D√©veloppement"],
            icons=["house", "list", "gear", "bar-chart", "envelope", "people"],
            menu_icon="cast",  # Icon for the sidebar
            default_index=0,  # Default selected menu
        )

    # Navigation based on selection
    if selected == "Home":
        page_home()
    elif selected == "Description du Dataset":
        page_dataset()
    elif selected == "Proc√©dure d'Apprentissage Automatique":
        page_procedure()
    elif selected == "R√©sultats":
        page_results()
    elif selected == "Classifier son mail":
        page_classify()
    elif selected == "√âquipe de D√©veloppement":
        page_team()


#################
## Page 'Home' ##
#################

import streamlit as st

def page_home(): 
    # Titre principal avec styles personnalis√©s
    st.markdown("""
        <style>
        .main-title {
            font-size: 40px;
            font-weight: bold;
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .sub-title {
            font-size: 20px;
            color: #34495e;
            text-align: center;
            margin-bottom: 20px;
        }
        .example-box {
            background-color: #ecf0f1;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .highlight {
            font-weight: bold;
            color: #e74c3c;
        }
        </style>
        <div class="main-title">Spamvanished, le bouclier ultime pour le filtrage anti-spam</div>
        <div class="sub-title">La seule solution pour s√©curiser vos e-mails en temps r√©el !</div>
    """, unsafe_allow_html=True)

    # Image illustrative
    st.image("hacker.jpeg", caption="S√©curisez vos communications num√©riques", use_column_width=True)

    # Avantages de la d√©tection de spam
    st.markdown("""
        ## üöÄ Pourquoi utiliser un d√©tecteur de SPAM ?
        - ‚úÖ √âvitez les arnaques en ligne.
        - ‚úÖ Prot√©gez vos informations personnelles.
        - ‚úÖ Am√©liorez votre productivit√© en filtrant les e-mails ind√©sirables.
    """)

    # Objectifs du projet
    st.subheader("üéØ Objectifs du Projet")
    st.write("""
    Ce projet vise √† cr√©er une solution de **filtrage automatique des spams** √† l'aide de mod√®les de **Machine Learning**. 
    Le but est de pr√©dire si un e-mail re√ßu est un **spam** (ind√©sirable) ou un **ham** (non-spam), afin d'am√©liorer la gestion des bo√Ætes de r√©ception et de prot√©ger les utilisateurs contre les e-mails malveillants.
    """)

    # Importance du projet
    st.subheader("üß† Pourquoi ce projet est-il important ?")
    st.write("""
    Avec l'augmentation du nombre de mails re√ßus chaque jour, il devient difficile de g√©rer efficacement les bo√Ætes de r√©ception. Les **spams** repr√©sentent une part importante des mails re√ßus et peuvent √™tre source de frustration. L'automatisation de leur filtrage permet non seulement de gagner du temps, mais aussi d'am√©liorer la s√©curit√© en √©vitant les mails malveillants.
    """)

    # Domaines d'application concrets
    st.subheader("üåç Domaines d'application concrets")
    st.write("""
    Ce mod√®le de classification de mails a plusieurs applications concr√®tes, notamment :
    
    1. **Bo√Ætes de r√©ception personnelles** : Am√©liorer l'exp√©rience utilisateur en filtrant automatiquement les spams et en permettant une gestion plus fluide des emails importants.
    
    2. **Entreprises et organisations** : Permettre aux entreprises de r√©duire les risques li√©s aux spams malveillants, am√©liorer la productivit√© des employ√©s et s√©curiser les informations sensibles.
    
    3. **Services financiers** : Automatiser le filtrage des mails pour d√©tecter les tentatives de phishing et les fraudes li√©es aux courriels.
    
    4. **Syst√®mes de gestion d'emails √† grande √©chelle** : Optimiser les services de messagerie pour les fournisseurs de services de mails (Gmail, Outlook, etc.), offrant ainsi une meilleure exp√©rience aux utilisateurs finaux.
    
    5. **Filtrage des contenus ind√©sirables** : L'algorithme peut √©galement √™tre appliqu√© √† d'autres types de contenus num√©riques, comme les commentaires ou les forums, pour √©viter la propagation de spams ou de contenus inappropri√©s.
    """)




###################################
## Page "Description du dataset" ##
###################################

import pandas as pd
import matplotlib.pyplot as plt

def page_dataset():
    # Titre principal
    st.markdown("""
        <style>
        .main-title {
            font-size: 30px;
            font-weight: bold;
            color: #2c3e50;
            text-align: center;
            margin-bottom: 20px;
        }
        .section-title {
            font-size: 22px;
            font-weight: bold;
            color: #34495e;
            margin-top: 20px;
        }
        </style>
        <div class="main-title">Description du Dataset</div>
    """, unsafe_allow_html=True)

    # Introduction
    st.write("""
        Ce dataset contient des e-mails class√©s en deux cat√©gories : **spam** et **ham** (e-mails l√©gitimes).
        Il est utilis√© pour entra√Æner et tester le mod√®le de filtrage de SPAM. Voici les d√©tails :
    """)

    # Section 1 : Informations cl√©s
    st.markdown("<div class='section-title'>üìä Informations cl√©s</div>", unsafe_allow_html=True)
    st.write("""
        - **Source :** [Kaggle - Spam Emails Dataset](https://www.kaggle.com/datasets/abdallahwagih/spam-emails)  
        - **Taille :** 5 572 e-mails  
        - **R√©partition :** Majorit√© de ham, minorit√© de spam  
        - **Caract√©ristiques :** Texte de l'e-mail, cat√©gorie (spam ou ham)
    """)

    # Chargement du dataset
    dataset_path = "spam.csv"
    try:
        data = pd.read_csv(dataset_path, encoding='latin-1')
        data = data.iloc[:, :2]  # Garder seulement les deux premi√®res colonnes (label et message)
        data.columns = ['Label', 'Message']  # Renommer les colonnes pour plus de clart√©

        # Section 2 : Aper√ßu des donn√©es
        st.markdown("<div class='section-title'>üìã Aper√ßu des Donn√©es</div>", unsafe_allow_html=True)
        st.dataframe(data.head(10))

        # T√©l√©charger un √©chantillon du dataset
        st.download_button(
            label="üì• T√©l√©charger un √©chantillon",
            data=data.head(100).to_csv(index=False).encode('utf-8'),
            file_name='sample_spam_dataset.csv',
            mime='text/csv'
        )

    # Section 3 : Visualisations
        st.markdown("<div class='section-title'>üìä Visualisations</div>", unsafe_allow_html=True)
        
        # R√©partition des cat√©gories (spam/ham)
        label_counts = data['Label'].value_counts()
        labels = label_counts.index
        sizes = label_counts.values
        colors = ['#2ecc71', '#e74c3c']
        fig, ax = plt.subplots()
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)
        ax.axis('equal')  # Cercle parfait
        st.pyplot(fig)
    
    
    except FileNotFoundError:
        st.error(f"Le fichier est introuvable au chemin sp√©cifi√© : {dataset_path}. Veuillez v√©rifier le chemin.")
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du chargement du dataset : {e}")

    # Section 4 : Analyse des Caract√©ristiques des E-mails
    st.markdown("<div class='section-title'>üìä Analyse des Caract√©ristiques des E-mails</div>", unsafe_allow_html=True)
    st.write("""
        Cette section pr√©sente une analyse des caract√©ristiques textuelles des e-mails en fonction de leur type (spam ou ham) :
        - Nombre moyen de caract√®res
        - Nombre moyen de mots
        - Nombre moyen de phrases
        Elle inclut √©galement la matrice de 
    """)

    # Visualisation des caract√©ristiques (caract√®res, mots, phrases)
    st.markdown("<div class='photo-section'>", unsafe_allow_html=True)

    # Image du nombre moyen de caract√®res pour spam et ham
    st.image("caracteres.png", caption="Nombre moyen de caract√®res", use_column_width=True)

    # Image du nombre moyen de mots pour spam et ham
    st.image("mots.png", caption="Nombre moyen de mots", use_column_width=True)

    # Image du nombre moyen de phrases pour spam et ham
    st.image("phrases.png", caption="Nombre moyen de phrases", use_column_width=True)

    st.markdown("</div>", unsafe_allow_html=True)


    # Titre de la section avec style
    st.markdown("""
        <style>
        .section-title {
            font-size: 28px;
            font-weight: bold;
            color: #2980b9;
            text-align: center;
            margin-bottom: 20px;
        }
        .section-description {
            font-size: 18px;
            color: #2c3e50;
            text-align: justify;
            margin-bottom: 20px;
        }
        .stImage {
            margin: 20px 0;
        }
        .photo-section {
            display: flex;
            justify-content: space-evenly;
            flex-wrap: wrap;
        }
        </style>
    """, unsafe_allow_html=True)

    # Titre principal de la section
    st.markdown("<div class='section-title'>‚òÅÔ∏è Nuage de Mots pour Spam et Ham</div>", unsafe_allow_html=True)

    # Description de la proc√©dure avec un fond color√©
    st.markdown("""
        <div class="section-description">
        Les nuages de mots ont √©t√© g√©n√©r√©s √† partir des e-mails, apr√®s un pr√©traitement du texte. 
        Voici les √©tapes du processus de transformation du texte :
        
        <ul>
            <li><strong>Conversion en minuscules</strong> : Tous les mots sont convertis en minuscules pour uniformiser les textes.</li>
            <li><strong>Tokenisation</strong> : Le texte est d√©coup√© en mots individuels (tokens).</li>
            <li><strong>Suppression des mots non-alphanum√©riques</strong> : Les caract√®res comme les √©mojis, les symboles sp√©ciaux (par exemple : `@`, `$`) sont supprim√©s.</li>
            <li><strong>Filtrage des mots vides (stopwords) et de la ponctuation</strong> : Les mots courants comme "et", "le", "la", etc., sont √©limin√©s.</li>
            <li><strong>Stemming</strong> : Les mots restants sont r√©duits √† leur racine (par exemple, "manger" devient "mang").</li>
        </ul>

        Ces √©tapes permettent d'obtenir des repr√©sentations plus pertinentes du contenu des e-mails, et les nuages de mots g√©n√©r√©s refl√®tent les mots les plus fr√©quents dans les cat√©gories spam et ham.
        </div>
    """, unsafe_allow_html=True)

    # Section d'affichage des nuages de mots avec une interface agr√©able
    st.markdown("<div class='photo-section'>", unsafe_allow_html=True)

    # Utilisation de widgets pour interactivit√© : Choix entre afficher les deux nuages
    col1, col2 = st.columns(2)
    
    with col1:
        # Affichage du nuage de mots pour le Spam
        st.image("nuage_spam.png", caption="Nuage de mots pour Spam", use_column_width=True)

    with col2:
        # Affichage du nuage de mots pour le Ham
        st.image("nuage_ham.png", caption="Nuage de mots pour Ham", use_column_width=True)

    st.markdown("</div>", unsafe_allow_html=True)

    # Ajouter un bouton pour t√©l√©charger les nuages de mots
    st.download_button(
        label="üì• T√©l√©charger le Nuage de Mots pour spam",
        data=open("nuage_spam.png", "rb").read(),
        file_name="nuage_spam.png",
        mime="image/png"
    )
    st.download_button(
        label="üì• T√©l√©charger le Nuage de Mots pour ham",
        data=open("nuage_ham.png", "rb").read(),
        file_name="nuage_ham.png",
        mime="image/png"
    )

    # Section 5 : Lien vers la source
    st.markdown("<div class='section-title'>üîó Source des Donn√©es</div>", unsafe_allow_html=True)
    st.write("""
        Les donn√©es utilis√©es sont issues de Kaggle. Vous pouvez les t√©l√©charger ici :  
        [Kaggle - Spam Emails Dataset](https://www.kaggle.com/datasets/abdallahwagih/spam-emails)
    """)


##################################################
## Page "Proc√©dure d'Apprentissage Automatique" ##
##################################################

import streamlit as st

def page_procedure():
    st.write("## üîß Apprentissage automatique üåü")
    st.write("""
    Voici un aper√ßu de la proc√©dure suivie pour d√©velopper notre mod√®le de classification de mails (spam/ham) :

    1. **Nettoyage et Pr√©paration des Donn√©es** :
       - V√©rification des valeurs manquantes : Identifier et traiter les donn√©es absentes.
       - Suppression des doublons : S'assurer que chaque observation est unique.
    
    2. **Analyse Exploratoire des Donn√©es (EDA)** :
       - Analyse univari√©e : √âtudier les distributions de chaque variable.
       - Analyse bivari√©e : Identifier les relations entre les variables.
       - Tokenisation : Conversion des textes en tokens pour pouvoir les traiter par les mod√®les.

    3. **Pr√©traitement et Transformation du Texte** :
       - Nettoyage des textes : Suppression des caract√®res sp√©ciaux, conversion en minuscules, etc.
       - Utilisation de la biblioth√®que NLTK pour effectuer le pr√©traitement (lemmatisation, suppression des stopwords).

    4. **Vectorisation avec TF-IDF** :
       - La vectorisation des donn√©es textuelles est effectu√©e √† l'aide de la m√©thode TF-IDF (Term Frequency-Inverse Document Frequency).

    5. **S√©paration du Dataset (Train/Test)** :
       - Entra√Ænement : 80% des donn√©es sont utilis√©es pour entra√Æner le mod√®le.
       - Test : 20% des donn√©es sont utilis√©es pour √©valuer la performance du mod√®le.

    6. **Construction des Mod√®les** :

    """)
    
    table_html = """
    <table style="width:100%; border:1px solid #ddd; border-collapse: collapse;">
        <thead>
            <tr>
                <th style="padding: 8px; background-color: #f2f2f2;">Mod√®le</th>
                <th style="padding: 8px; background-color: #f2f2f2;">Description</th>
                <th style="padding: 8px; background-color: #f2f2f2;">Avantages</th>
                <th style="padding: 8px; background-color: #f2f2f2;">Limites</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="padding: 8px;">SVM (Support Vector Machine)</td>
                <td style="padding: 8px;">Mod√®le supervis√© qui cherche √† trouver un hyperplan optimal s√©parant les classes dans un espace de caract√©ristiques. Utilise des noyaux pour les donn√©es non lin√©aires.</td>
                <td style="padding: 8px;">Efficace dans des espaces de haute dimension. G√®re les probl√®mes non lin√©aires gr√¢ce aux noyaux.</td>
                <td style="padding: 8px;">Lent pour les grands ensembles de donn√©es. N√©cessite un ajustement des hyperparam√®tres.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">Naive Bayes</td>
                <td style="padding: 8px;">Mod√®le probabiliste bas√© sur le th√©or√®me de Bayes et l'ind√©pendance conditionnelle des caract√©ristiques.</td>
                <td style="padding: 8px;">Rapide, efficace pour des grands ensembles de donn√©es et les probl√®mes de texte.</td>
                <td style="padding: 8px;">Ind√©pendance irr√©aliste pour certaines t√¢ches.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">GaussianNB()</td>
                <td style="padding: 8px;">Utilise une distribution gaussienne pour les donn√©es continues.</td>
                <td style="padding: 8px;">Simple et rapide pour les donn√©es continues.</td>
                <td style="padding: 8px;">Moins efficace si les donn√©es ne suivent pas une distribution gaussienne.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">MultinomialNB()</td>
                <td style="padding: 8px;">Mod√®le bas√© sur la distribution multinomiale, id√©al pour la classification de texte (ex : classification de documents).</td>
                <td style="padding: 8px;">Efficace pour la classification de texte.</td>
                <td style="padding: 8px;">Moins performant avec des donn√©es non cat√©gorielles.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">BernoulliNB()</td>
                <td style="padding: 8px;">Utilise des donn√©es binaires, souvent pour des t√¢ches comme la classification de texte avec pr√©sence/absence de caract√©ristiques.</td>
                <td style="padding: 8px;">Efficace pour des donn√©es binaires ou de type pr√©sence/absence.</td>
                <td style="padding: 8px;">Moins efficace pour des donn√©es continues ou non binaires.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">R√©gression Logistique</td>
                <td style="padding: 8px;">Mod√®le lin√©aire utilis√© pour la classification binaire, pr√©dit la probabilit√© de se retrouver ou non dans une classe.</td>
                <td style="padding: 8px;">Simple, interpr√©table, efficace pour des t√¢ches de classification binaire.</td>
                <td style="padding: 8px;">Peut sous-performer avec des relations non lin√©aires complexes.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">Arbre de D√©cision</td>
                <td style="padding: 8px;">Utilise un arbre binaire pour classer les donn√©es en fonction des valeurs des caract√©ristiques.</td>
                <td style="padding: 8px;">Interpr√©table, efficace pour des relations non lin√©aires, pas besoin de normalisation.</td>
                <td style="padding: 8px;">Sensible au bruit et au surajustement avec des arbres trop profonds.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">For√™t Al√©atoire</td>
                <td style="padding: 8px;">Plusieurs arbres de d√©cision o√π chaque arbre est entra√Æn√© sur des sous-ensembles de donn√©es et de caract√©ristiques. La pr√©diction est obtenue par un vote majoritaire.</td>
                <td style="padding: 8px;">R√©sistant au surajustement, robuste pour des ensembles complexes, g√®re bien les donn√©es manquantes.</td>
                <td style="padding: 8px;">Moins interpr√©table que les arbres individuels, computationnellement co√ªteux pour de tr√®s grands ensembles.</td>
            </tr>
            <tr>
                <td style="padding: 8px;">K-Nearest Neighbors (K-NN)</td>
                <td style="padding: 8px;">Mod√®le de classification bas√© sur la distance, o√π un exemple est class√© par la majorit√© des voisins les plus proches.</td>
                <td style="padding: 8px;">Simple, facile √† comprendre, efficace pour des petites donn√©es.</td>
                <td style="padding: 8px;">Lent pour de grands ensembles, d√©pend fortement du choix de la distance, n√©cessite beaucoup de m√©moire.</td>
            </tr>
        </tbody>
    </table>
    """

    # Afficher le tableau HTML dans l'interface Streamlit
    st.markdown(table_html, unsafe_allow_html=True)

    st.write(""" 

    7. **√âvaluation des Mod√®les** :
       - Consid√©rant le d√©s√©quilibre observ√© au niveau de la target, les m√©triques F1 Score et AUC ont √©t√© utilis√©es pour √©valuer les performances.

    8. **S√©lection du Mod√®le Final** :
       - Le mod√®le ayant obtenu les meilleures performances a √©t√© choisi pour les pr√©dictions.

    9. **V√©rification de l'Overfitting et de l'Underfitting** :
       - Observation des courbes d'apprentissage et des scores sur les donn√©es de validation pour √©viter l'overfitting et l'underfitting.

    10. **S√©rialisation du Mod√®le** :
        - Le meilleur mod√®le a √©t√© s√©rialis√© en fichier .pkl pour √™tre utilis√© dans le script de d√©ploiement.
    """)





########################################
########## Page "R√©sultats" ############
########################################


def page_results():
    st.write("<h3 style='color: #ff6347;'>üåü R√©sultats de l'√âvaluation du Mod√®le üåü</h3>", unsafe_allow_html=True)
    
    st.markdown("""
        Apr√®s avoir entra√Æn√© et √©valu√© plusieurs mod√®les, voici les r√©sultats d√©taill√©s des performances des diff√©rents mod√®les utilis√©s pour la classification de mails (spam/ham) :
    """, unsafe_allow_html=True)

    # R√©sultats des diff√©rents mod√®les sous forme de tableau avec fond blanc
    st.markdown("""
    <div style="background-color: #ffffff; padding: 15px; border-radius: 8px; margin-top: 20px;">
        <p style="font-size: 18px; color: #2f4f4f;">
        </p>
        <table style="width: 100%; text-align: left; border-collapse: collapse; background-color: #ffffff;">
            <thead>
                <tr style="background-color: #ff6347; color: white;">
                    <th>Mod√®le</th>
                    <th>F1 Score</th>
                    <th>AUC</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>BernoulliNB</td>
                    <td style="color: #4682b4;">0.888283</td>
                    <td style="color: #4682b4;">0.902725</td>
                </tr>
                <tr>
                    <td>SVC</td>
                    <td style="color: #4682b4;">0.862637</td>
                    <td style="color: #4682b4;">0.886762</td>
                </tr>
                <tr>
                    <td>Random Forest</td>
                    <td style="color: #4682b4;">0.853933</td>
                    <td style="color: #4682b4;">0.875497</td>
                </tr>
                <tr>
                    <td>MultinomialNB</td>
                    <td style="color: #4682b4;">0.835735</td>
                    <td style="color: #4682b4;">0.858911</td>
                </tr>
                <tr>
                    <td>Logistic Regression</td>
                    <td style="color: #4682b4;">0.732143</td>
                    <td style="color: #4682b4;">0.800381</td>
                </tr>
                <tr>
                    <td>Decision Tree</td>
                    <td style="color: #4682b4;">0.648318</td>
                    <td style="color: #4682b4;">0.755339</td>
                </tr>
                <tr>
                    <td>GaussianNB</td>
                    <td style="color: #4682b4;">0.627451</td>
                    <td style="color: #4682b4;">0.841225</td>
                </tr>
            </tbody>
        </table>
    </div>
    """, unsafe_allow_html=True)

    # Meilleur mod√®le et son √©valuation
    st.markdown("""
        Le mod√®le ayant obtenu les meilleures performances globales est le mod√®le **BernoulliNB (Bernoulli Naive Bayes)**, avec un F1 Score de **0,88** et une AUC de **0,90**.
        Il a √©t√© retenu comme mod√®le final pour pr√©dire si un mail re√ßu est **spam** ou **ham**. Ce mod√®le pr√©sente la meilleure combinaison de pr√©cision et de rappel parmi tous les mod√®les √©valu√©s.
    """, unsafe_allow_html=True)




###################################
## Section "Classifier son mail" ##
###################################

def page_classify():
    
    # Configuration de l'application Streamlit
    st.markdown("""
    <style>
        .main-title {
            font-size: 36px;
            font-weight: bold;
            color: #4CAF50;
            text-align: center;
            margin-bottom: 20px;
        }
        .sub-title {
            font-size: 24px;
            color: #FF5733;
            margin-bottom: 10px;
        }
        .description {
            font-size: 18px;
            color: #555;
            margin-bottom: 20px;
        }
        .btn-classify {
            background-color: #4CAF50;
            color: white;
            border-radius: 10px;
            padding: 10px 20px;
            font-size: 16px;
        }
        .btn-classify:hover {
            background-color: #45a049;
        }
        .result-success {
            background-color: #28a745;
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
        }
        .result-error {
            background-color: #dc3545;
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
        }
    </style>
    """, unsafe_allow_html=True)

    # Titre principal
    st.markdown('<div class="main-title">üìß Effectuez le filtrage anti-spam de vos mails </div>', unsafe_allow_html=True)

    # Description
    st.markdown('<div class="description"> Cette application utilise l\'apprentissage automatique pour d√©terminer si votre e-mail est <b>Spam</b> ou <b>Non Spam (Ham)</b>.</div>', unsafe_allow_html=True)

    # Zone de saisie pour l'utilisateur
    st.subheader("üì• Entrez le texte de l'e-mail")
    user_input = st.text_area("Entrez le texte de l'e-mail ci-dessous pour la classification :", height=150)

    import logging
from googletrans import Translator
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import string
import streamlit as st

# Configurer le logging
logging.basicConfig(level=logging.DEBUG)

ps = PorterStemmer()

def transform_text(text):
    try:
        logging.debug("D√©but de la transformation du texte.")
        
        # Initialiser le traducteur
        translator = Translator()
        
        # D√©tection de la langue
        detected_lang = translator.detect(text).lang
        logging.debug(f"Langue d√©tect√©e : {detected_lang}")
        
        # Traduction en anglais si la langue d√©tect√©e n'est pas l'anglais
        if detected_lang != 'en':
            text = translator.translate(text, src=detected_lang, dest='en').text
            logging.debug(f"Texte traduit : {text}")
        
        # Conversion du texte en minuscules
        text = text.lower()
        logging.debug(f"Texte en minuscules : {text}")
        
        # Tokenisation du texte
        text = nltk.word_tokenize(text)
        logging.debug(f"Texte tokenis√© : {text}")
        
        # Suppression des mots non alphanum√©riques
        text = [word for word in text if word.isalnum()]
        logging.debug(f"Texte apr√®s suppression des mots non alphanum√©riques : {text}")
        
        # Suppression des stopwords et de la ponctuation
        stop_words = set(stopwords.words('english'))
        text = [word for word in text if word not in stop_words and word not in string.punctuation]
        logging.debug(f"Texte apr√®s suppression des stopwords et de la ponctuation : {text}")
        
        # Application du stemming
        text = [ps.stem(word) for word in text]
        logging.debug(f"Texte apr√®s stemming : {text}")
        
        # Retourner le texte transform√©
        transformed_text = " ".join(text)
        logging.debug(f"Texte transform√© final : {transformed_text}")
        return transformed_text
    
    except Exception as e:
        logging.error(f"Erreur lors du traitement : {e}")
        return ""

    # Interface Streamlit
    user_input = st.text_area("Entrez le texte de l'e-mail ci-dessous pour la classification :", height=150)
    
    # Bouton de classification personnalis√©
    classify_button = st.button("üîç Classifier", key="classify_button", help="Cliquez ici pour classifier l'e-mail", use_container_width=True)
    
    if classify_button:
        if user_input.strip():  # V√©rifier si l'entr√©e n'est pas vide
            try:
                data = [user_input]
                transformed_data = [transform_text(text) for text in data]  # Transformer l'entr√©e √† l'aide de la fonction transform_text
                
                if not all(transformed_data):  # V√©rifier si la transformation a r√©ussi
                    st.error("Erreur lors de la transformation du texte.")
                else:
                    logging.debug(f"Texte transform√© pour vectorisation : {transformed_data}")
                    vec = cv.transform(transformed_data).toarray()  # Transformer l'entr√©e √† l'aide du vectoriseur
                    logging.debug(f"Vecteur transform√© : {vec}")
                    result = model.predict(vec)  # Pr√©dire √† l'aide du mod√®le charg√©
                    logging.debug(f"R√©sultat de la classification : {result}")
    
                    # Afficher le r√©sultat avec couleurs personnalis√©es
                    if result[0] == 0:
                        st.markdown('<div class="result-success">‚úÖ Ce n\'est PAS un e-mail Spam !</div>', unsafe_allow_html=True)
                    else:
                        st.markdown('<div class="result-error">üö® C\'est un e-mail SPAM !</div>', unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Une erreur s'est produite lors de la classification : {e}")
        else:
            st.warning("‚ö†Ô∏è Veuillez entrer un texte d'e-mail avant de proc√©der √† la classification.")



######################################
## Section "Equipe de d√©veloppemnt" ##
######################################


# D√©finition de la fonction page_team
def page_team():
    # Titre de la section
    st.title("üîç √âquipe de D√©veloppement ")

    # Description g√©n√©rale de l'√©quipe
    st.markdown(
        """
        **Bienvenue dans notre √©quipe !**  
        Nous sommes une √©quipe d'**Ing√©nieurs Statisticiens √âconomistes (ISE)** passionn√©s par l'**intelligence artificielle**, les **statistiques** et l'**√©conomie appliqu√©e**.  
        En se basant sur les donn√©es, notre objectif est de proposer des solutions innovantes pour r√©soudre des probl√®mes sp√©cifiques et am√©liorer le bien-√™tre des populations.
        """
    )

    # Section pour mettre en valeur les membres de l'√©quipe
    st.markdown("<h3 style='color: #1f77b4;'>üë®‚Äçüíª Membres de l'√âquipe üë©‚Äçüíª</h3>", unsafe_allow_html=True)

    # Premier membre de l'√©quipe
    st.markdown(
        """
        **Nom du D√©veloppeur 1 : HOUNSOU Jacquelin**  
        - **Profil :** Ing√©nieur Statisticien Economiste (ISE)   
        - [üìö GitHub](https://github.com/MARIEL-J) | [üìß Email](mailto:hounsoujacquelin@gmail.com)
    """, unsafe_allow_html=True)

    # Deuxi√®me membre de l'√©quipe
    st.markdown( 
    """
    **Nom du D√©veloppeur 2 : AKINDELE F√©ridia**  
    - **Profil :** Ing√©nieure Statisticienne Economiste (ISE) 
    - [üìö GitHub](https://github.com/Winrid-lang) | [üìß Email](mailto:feridiaakindele@gmail.com)
    """, unsafe_allow_html=True)

    # Visuels et graphismes : Ajout d'images ou avatars des membres
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("<h3 style='color: #2ecc71;'>Notre Vision :</h3>", unsafe_allow_html=True)
    st.markdown(
        """
        Notre √©quipe est d√©di√©e √† l'application des **m√©thodes statistiques** et des **algorithmes de machine learning** pour r√©soudre des probl√®mes complexes du quotidien.  
        Nous croyons fermement √† l'importance de l'**innovation**, de la **collaboration** et de la **transparence** dans notre travail.
        """
    )

    # Citation inspirante
    st.markdown(
        """
        _"Les donn√©es ne mentent pas, mais l'interpr√©tation des donn√©es fait toute la diff√©rence."_
        """
    )

    # Ajout d'un visuel inspirant, une image symbolisant l'innovation, les statistiques ou l'IA
    st.image("ISE.png", caption="L'expertISE au service du d√©veloppement !", width=300)

    # Bouton de contact
    st.markdown("<hr>", unsafe_allow_html=True)
    st.button("üí¨ Nous Contacter", on_click=lambda: st.write("Merci pour votre message ! Nous vous r√©pondrons dans les plus brefs d√©lais."))
    
    # Ajout de sections interactives ou graphiques sur l'impact de vos travaux
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown(
        """
        ### üìä Notre Impact :
        En tant qu'**Ing√©nieurs Statisticiens √âconomistes**, nous appliquons nos comp√©tences pour r√©soudre des d√©fis complexes √† travers l'analyse des donn√©es et la mod√©lisation.  
        Gr√¢ce √† notre expertise, nous avons pu cr√©er des mod√®les **pr√©dictifs** efficaces pour la classification des e-mails, un domaine o√π l'**apprentissage automatique** peut vraiment faire la diff√©rence.
        """
    )

        
def _set_block_container_style(
    max_width: int = 700, max_width_100_percent: bool = False):
    if max_width_100_percent:
        max_width_str = f"max-width: 95%;"
    else:
        max_width_str = f"max-width: {max_width}px;"
    st.markdown(
        f"""
<style>
    .reportview-container .main .block-container{{
        {max_width_str}
    }}
</style>
""",
        unsafe_allow_html=True,
    )  

main()
